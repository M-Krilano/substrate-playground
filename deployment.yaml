apiVersion: v1
kind: ServiceAccount
metadata:
  name: default-service-account
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-role
subjects:
- kind: ServiceAccount
  name: default-service-account
  namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: playground
spec:
  selector:
    matchLabels:
      app: playground
  replicas: 1
  template:
    metadata:
      labels:
        app: playground
    spec:
      serviceAccountName: default-service-account
      containers:
      - name: playground
        image: jeluard/substrate-playground@sha256:a116d38bf39a65eebe1ada0d1a49a7004aa851b3267b605db7234a2e9d45338f
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: playground-http
  labels:
    app: playground
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: playground
---
# Creates an HTTPS certificate
apiVersion: networking.gke.io/v1beta1
kind: ManagedCertificate
metadata:
  name: playground-certificate
spec:
  domains:
    - playground.substrate.dev
---
# Creates an ingress associating the certificate to the LoadBalancer
# See https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: playground-ingress
  annotations:
    kubernetes.io/ingress.global-static-ip-name: "playground"
    networking.gke.io/managed-certificates: playground-certificate
spec:
  tls:
  - hosts:
    - playground.substrate.dev
  rules:
    - host: playground.substrate.dev
      http:
        paths:
        - path: /
          backend:
            serviceName: playground-http
            servicePort: 80