name: Event template-updated
'true':
  repository_dispatch:
    types:
      - template-updated
env:
  DOCKER_BUILDKIT: 1
  TEMPLATE_ID: ${{ github.event.client_payload.id }}
  TEMPLATE_REF: ${{ github.event.client_payload.ref }}
  BASE_TEMPLATE_VERSION: sha-ab5960e
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install yq
        run: 'python -m pip install --upgrade pip

          pip install yq

          '
      - name: Set variables
        run: 'echo ::set-output name=sha::${GITHUB_SHA::7}

          echo ::set-output name=tag::template-${TEMPLATE_ID}-${GITHUB_SHA::7}

          echo ::set-output name=template::paritytech/substrate-playground-template-${TEMPLATE_ID}

          echo ::set-output name=image::paritytech/substrate-playground-template-${TEMPLATE_ID}:sha-${GITHUB_SHA::7}

          echo ::set-output name=template-theia::paritytech/substrate-playground-template-${TEMPLATE_ID}-theia

          echo ::set-output name=theia-image::paritytech/substrate-playground-template-${TEMPLATE_ID}-theia:sha-${GITHUB_SHA::7}

          FILE=conf/k8s/overlays/staging/templates/$TEMPLATE_ID

          REPOSITORY=`cat $FILE | yq -r .repository`

          echo "::set-output name=repository::$( echo $REPOSITORY )"

          echo "::set-output name=ref::$( echo ${TEMPLATE_REF:-master} )"'
        id: env
      - name: Checkout remote repository
        uses: actions/checkout@v2
        with:
          path: template
          repository: ${{ steps.env.outputs.repository }}
          ref: ${{ steps.env.outputs.ref }}
          token: ${{ secrets.PAT_TOKEN }}
      - name: Prepare labels
        id: prep
        run: "VERSION=edge\nif [[ $GITHUB_REF == refs/tags/* ]]; then\n  VERSION=${GITHUB_REF#refs/tags/}\n\
          elif [[ $GITHUB_REF == refs/heads/* ]]; then\n  VERSION=$(echo ${GITHUB_REF#refs/heads/}\
          \ | sed -r 's#/+#-#g')\nelif [[ $GITHUB_REF == refs/pull/* ]]; then\n  VERSION=pr-${{\
          \ github.event.number }}\nfi\necho ::set-output name=version::${VERSION}\n\
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')\n"
      - name: Prepare labels template
        id: prep-template
        run: "VERSION=edge\nif [[ $GITHUB_REF == refs/tags/* ]]; then\n  VERSION=${GITHUB_REF#refs/tags/}\n\
          elif [[ $GITHUB_REF == refs/heads/* ]]; then\n  VERSION=$(echo ${GITHUB_REF#refs/heads/}\
          \ | sed -r 's#/+#-#g')\nelif [[ $GITHUB_REF == refs/pull/* ]]; then\n  VERSION=pr-${{\
          \ github.event.number }}\nfi\nDOCKER_IMAGE=${{ steps.env.outputs.template\
          \ }}\nTAGS=\"${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:sha-${GITHUB_SHA::7}\"\
          \necho ::set-output name=tags::${TAGS}\n"
      - name: Prepare labels template-theia
        id: prep-template-theia
        run: "VERSION=edge\nif [[ $GITHUB_REF == refs/tags/* ]]; then\n  VERSION=${GITHUB_REF#refs/tags/}\n\
          elif [[ $GITHUB_REF == refs/heads/* ]]; then\n  VERSION=$(echo ${GITHUB_REF#refs/heads/}\
          \ | sed -r 's#/+#-#g')\nelif [[ $GITHUB_REF == refs/pull/* ]]; then\n  VERSION=pr-${{\
          \ github.event.number }}\nfi\nDOCKER_IMAGE=${{ steps.env.outputs.template-theia\
          \ }}\nTAGS=\"${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:sha-${GITHUB_SHA::7}\"\
          \necho ::set-output name=tags::${TAGS}\n"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GKE
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push template Docker image
        uses: docker/build-push-action@v2
        with:
          context: template
          file: templates/Dockerfile.template
          build-args: BASE_TEMPLATE_VERSION=${{ env.BASE_TEMPLATE_VERSION }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep-template.outputs.tags }}
          labels: 'org.opencontainers.image.source=${{ github.event.repository.clone_url
            }}

            org.opencontainers.image.created=${{ steps.prep.outputs.created }}

            org.opencontainers.image.revision=${{ github.sha }}

            '
      - name: Build and Push theia template image
        uses: docker/build-push-action@v2
        with:
          context: templates
          file: templates/Dockerfile.theia-template
          build-args: BASE_TEMPLATE_VERSION=${{ env.BASE_TEMPLATE_VERSION }},TEMPLATE_IMAGE=${{
            steps.env.outputs.image }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep-template-theia.outputs.tags }}
          labels: 'org.opencontainers.image.source=${{ github.event.repository.clone_url
            }}

            org.opencontainers.image.created=${{ steps.prep.outputs.created }}

            org.opencontainers.image.revision=${{ github.sha }}

            '
      - name: Update template version
        run: 't=$(mktemp)

          cat conf/k8s/overlays/staging/templates/${TEMPLATE_ID} | yq -y ".image =
          \"${{ steps.env.outputs.theia-image }}\"" > ${t} && mv ${t} conf/k8s/overlays/staging/templates/${TEMPLATE_ID}'
      - name: Commit template version update
        uses: EndBug/add-and-commit@v4
        with:
          message: ':bookmark: yee shall thurst into a new version of ${{ env.TEMPLATE_ID
            }}'
          add: conf/k8s/overlays/staging/templates/${{ env.TEMPLATE_ID }}
          tag: ${{ steps.env.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      - name: Create Release for ${{ env.TEMPLATE_ID }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.env.outputs.tag }}
          release_name: Release ${{ steps.env.outputs.tag }}
          body: 'Released template for ${{ env.TEMPLATE_ID }} ${{ steps.env.outputs.image
            }}

            '
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
