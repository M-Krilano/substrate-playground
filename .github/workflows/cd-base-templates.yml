name: Continuous Deployment base templates

on:
  push:
    branches:
      - develop
      - master
    paths:
      - '.github/workflows/cd-base-templates.yml'
      - 'templates/**'

env:
  GKE_ZONE: us-central1-a
  DOCKER_BUILDKIT: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Set env to staging
        if: endsWith(github.ref, '/develop')
        run: |
          echo "::set-env name=ENVIRONMENT::staging"
          echo "::set-env name=GKE_CLUSTER::susbtrate-playground-staging"

      - name: Set env to production
        if: endsWith(github.ref, '/master')
        run: |
          echo "::set-env name=ENVIRONMENT::production"
          echo "::set-env name=GKE_CLUSTER::susbtrate-playground"

      - uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCLOUD_KEY }}
          export_default_credentials: true
          project_id: ${{ secrets.GKE_PROJECT }}
      - run: gcloud --quiet auth configure-docker
      - run: gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      - run: echo "::set-env name=ACCESS_TOKEN::$(gcloud auth print-access-token)"

      - uses: docker/build-push-action@v1
        with:
          username: oauth2accesstoken
          password: ${{ env.ACCESS_TOKEN }}
          path: templates
          dockerfile: templates/Dockerfile.base
          repository: substrateplayground-252112/jeluard/substrate-playground-template-base
          registry: gcr.io
          tags: latest
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true

      - uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: templates
          dockerfile: templates/Dockerfile.base
          repository: paritytech/substrate-playground-template-base
          tags: latest
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true

      - uses: docker/build-push-action@v1
        with:
          username: oauth2accesstoken
          password: ${{ env.ACCESS_TOKEN }}
          path: templates
          dockerfile: templates/Dockerfile.theia-base
          repository: substrateplayground-252112/jeluard/substrate-playground-template-theia-base
          registry: gcr.io
          tags: latest
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true

      - uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: templates
          dockerfile: templates/Dockerfile.theia-base
          repository: paritytech/substrate-playground-template-theia-base
          tags: latest
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true

      - run: echo ::set-output name=sha::sha-${GITHUB_SHA::7}
        id: env

      - name: Update Dockerfile.template base image
        run: sed -i 's/:sha-[^. ]* /:${{ steps.env.outputs.sha }} /g' templates/Dockerfile.template

      - uses: EndBug/add-and-commit@v4
        with:
          message: ":bookmark: update base template image"
          add: "templates/Dockerfile.template"
          tag: base-templates-${{ steps.env.outputs.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: base-templates-${{ steps.env.outputs.sha }}
          release_name: ${{ steps.env.outputs.sha }}
          body: |
            Base templates release:
            - paritytech/substrate-playground-template-base:${{ steps.env.outputs.sha }}
            - paritytech/substrate-playground-template-theia-base:${{ steps.env.outputs.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Go through existing templates and trigger template rebuilds using newly created base templates

  list-existing-templates:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-templates.outputs.matrix }}
    steps:
    - name: Install yq
      run: |
        python -m pip install --upgrade pip
        pip install yq

    - id: set-templates
      run: |
        JSON="{\"include\":["
        for FILE in "conf/k8s/overlays/$ENVIRONMENT/templates"/*
        do
          if [ -f "$FILE" ];then
            IMAGE="$( yq r $FILE base-image )"
            JSONline="{\"id\": \"$FILE\", \"image\": \"$IMAGE\"},"
            JSON="$JSON$JSONline"
          fi
        done
        JSON="$JSON]}"
        echo $JSON

        echo "::set-output name=matrix::$( echo "$JSON" )"

  rebuild-existing-templates:
    needs: list-existing-templates
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.list-existing-templates.outputs.matrix)}}
    steps:
    - name: Rebuild template ${{ matrix.id }}
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        event-type: template-updated
        client-payload: '{"id": ${{ matrix.id }}, "image": ${{ matrix.image }}}'

# TODO checkout template repo, check if based on a base template, if so create a PR to update to new version